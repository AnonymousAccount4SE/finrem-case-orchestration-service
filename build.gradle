buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '2.6.2'
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'net.ltgt.apt' version '0.10'
    id 'io.franzbecker.gradle-lombok' version '1.14'
    id 'org.owasp.dependencycheck' version '3.2.1'
    id 'org.sonarqube' version '2.6.2'
    id 'pmd'
    id "info.solidsoft.pitest" version "1.3.0"

}


apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'info.solidsoft.pitest'


group = 'uk.gov.hmcts.reform.finrem.caseorchestration'
version = '0.0.1'
mainClassName = 'uk.gov.hmcts.reform.finrem.caseorchestration.CaseOrchestrationApplication'
sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    mavenCentral()
}

sourceSets {
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }
//	functional {
//		java.srcDir 'src/functional/java'
//		resources.srcDir 'src/functional/resources'
//		compileClasspath += main.output + test.output
//		runtimeClasspath += main.output + test.output
//	}
//
//	integrationTest {
//		java.srcDir 'src/integrationTest/java'
//		resources.srcDir 'src/integrationTest/resources'
//		compileClasspath += main.output + test.output
//		runtimeClasspath += main.output + test.output
//	}
}

def versions = [
        lombokVersion: '1.18.0'
]

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-configuration-processor")
    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'
    compile group: 'org.projectlombok', name: 'lombok', version: versions.lombokVersion
    apt group: 'org.projectlombok', name: 'lombok', version: versions.lombokVersion

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

sonarqube {
    println "echo sonarqube"
    properties {
        property "sonar.projectKey", "finrem-case-orchestration"
        property "sonar.host.url", "https://sonarcloud.io/"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}

checkstyle.toolVersion = '7.2'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

pmd {
    toolVersion = "5.8.1"
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("ruleset.xml")
}

jacocoTestReport {
    executionData(test)

    reports {
        xml {
            enabled true
        }

        html {
            enabled true
        }
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.finrem.caseorchestration.*']
    excludedClasses = ['uk.gov.hmcts.reform.finrem.caseorchestration.CaseOrchestrationApplication',
                       'uk.gov.hmcts.reform.finrem.caseorchestration.model.*',
                       'uk.gov.hmcts.reform.finrem.caseorchestration.config.*',
                       'uk.gov.hmcts.reform.finrem.caseorchestration.controllers.PaymentByAccountStub']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 80
}


check.dependsOn dependencyCheckAnalyze
build.dependsOn jacocoTestReport

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveName 'finrem-case-orchestration.jar'
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
}


task integrationTest(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
}
