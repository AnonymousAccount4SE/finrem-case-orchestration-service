buildscript {
	ext {
		springBootVersion = '2.0.3.RELEASE'
	}
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'net.ltgt.apt' version '0.10'
	id 'io.franzbecker.gradle-lombok' version '1.14'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

sourceSets {
	test {
		java.srcDir 'src/test/java'
	}
	functional {
		java.srcDir 'src/functional/java'
		resources.srcDir 'src/functional/resources'
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}

	integrationTest {
		java.srcDir 'src/integrationTest/java'
		resources.srcDir 'src/integrationTest/resources'
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

def versions = [
		lombokVersion: '1.18.0'
]

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'
	compile group: 'org.projectlombok', name: 'lombok', version:versions.lombokVersion
	apt group: 'org.projectlombok', name: 'lombok', version:versions.lombokVersion

	testCompile('org.springframework.boot:spring-boot-starter-test')
}


jar {
	archiveName 'finrem-case-progression.jar'
	manifest {
		attributes 'Implementation-Title': project.name,
				'Implementation-Version': project.version
	}
}


task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
	testClassesDirs = sourceSets.functional.output.classesDirs
	classpath = sourceSets.functional.runtimeClasspath

	useJUnit {
		includeCategories 'uk.gov.hmcts.reform.finrem.finremcaseprogression.FinremCaseProgressionApplicationTests'
	}
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
	testClassesDirs = sourceSets.functional.output.classesDirs
	classpath = sourceSets.functional.runtimeClasspath
}


task integrationTest(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}
